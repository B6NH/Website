<h1>Tcl</h1>

<p>
   Tcl is a language in which most constructs,
   statements and control structures are represented as commands.
   The main and basic data type is string.
   Tcl, thanks to the popular and widely used Tk extension,
   allows to easily create applications with a graphical interface.
</p>

<ol>
  <li><a href="#variables">Variables</a></li>
  <li><a href="#loops">Loops</a></li>
  <li><a href="#structures">Control structures</a></li>
  <li><a href="#lists">Lists</a></li>
  <li><a href="#arrays">Arrays</a></li>
  <li><a href="#dictionaries">Dictionaries</a></li>
  <li><a href="#functions">Functions</a></li>
</ol>

<hr>

<ol>

  <li id="variables">
    The basic functions of Tcl are operations on
    <b>variables</b> and mathematical calculations.
    <pre><code># The <em>set</em> command is used for assignments.
set a 5

# Semicolon separates the statements on one line
set b 8 ; set c 9

# The dollar sign is used to retrieve the value of a variable
# Mathematical expressions are executed using the expr command
puts "$a + $b = [expr {$a+$b}]"
puts "$b * $c = [expr {$a*$c}]"

# Variables can be unset
unset a

# This expression would cause an error
# puts $a
</code></pre>
<pre class="coutput"><samp>5 + 8 = 13
8 * 9 = 45
</samp></pre>
  </li>

  <li id="loops">
    With <b>loops</b>, it is possible to perform some operation many times.
    <pre><code># For loop
for {set i 0} {$i < 3} {incr i} {
  puts $i
}

# Strings without spaces can be
# written without quotation marks
puts ---

# While loop
set i 0
while {$i < 3} {
  puts $i
  incr i
}
</code></pre>
<pre class="coutput"><samp>0
1
2
---
0
1
2
</samp></pre>
  </li>

  <li id="structures">
    <b>Control structures</b> allow to perform appropriate actions
    while the program is running.
    <pre><code># Conditional instruction
set a 5
if {$a > 5} {
  puts "Value is greater than five"
} else {
  puts "Value is less than or equal to five"
}

puts ---

# Switch
set b 8
switch $b {

  5 {
    puts Five
  }

  8 {
    puts Eight
  }

  10 {
    puts Ten
  }

  default {
    puts "Default behaviour"
  }

}

puts ---

# Ternary operator
set c 20
puts [expr {$c==20 ? "Twenty" : "Other"}]
</code></pre>
<pre class="coutput"><samp>Value is less than or equal to five
---
Eight
---
Twenty
</samp></pre>
  </li>

  <li id="lists">
    A <b>list</b> is an ordered collection of values.
    Individual elements are accessed through integer indices.
    <pre><code># Lists can be created in various ways
set lst1 "5 6 12"
set lst2 {apple plum peach}
set lst3 [list 2 pineapple 10]

# List length
puts "Length of List 1: [llength $lst1]"

# Get list element at index 2
puts "Third element is [lindex $lst2 2]"

# Set element at index 0
lset lst2 0 orange

# Add element at the end
lappend lst2 pear

puts "List 1: $lst1"
puts "List 2: $lst2"
puts "List 3: $lst3"

puts Foreach:

# Foreach loop can be used with lists
foreach value $lst2 {
  puts $value
}

puts ---

# Look for a value in the list
puts "Value 'peach' is at index [lsearch $lst2 peach]"

# Lists can be sorted
set lst3 [lsort $lst3]
puts "Sorted list: $lst3"
</code></pre>
<pre class="coutput"><samp>Length of List 1: 3
Third element is peach
List 1: 5 6 12
List 2: orange plum peach pear
List 3: 2 pineapple 10
Foreach:
orange
plum
peach
pear
---
Value 'peach' is at index 2
Sorted list: 10 2 pineapple
</samp></pre>
  </li>

  <li id="arrays">
    <b>Arrays</b> are unordered collections of values
    that are accessed through string indices.
    <pre><code># Set array values
set person(name) John
set person(points) 500

# Show array content
puts $person(name)
puts $person(points)

# Array functions
puts "Size: [array size person]"
puts "Indices: [array names person]"
puts "Array converted to list: [array get person]"

puts ---

# Lists can be converted to arrays
set list1 {width 640 height 480 color red}
array set arrayFromList $list1

puts $arrayFromList(color)
puts $arrayFromList(width)
puts $arrayFromList(height)

puts ---

# Foreach loop can be used with arrays if
# the order of the elements is not important
foreach n [array names arrayFromList] {
  puts $arrayFromList($n)
}
</code></pre>
<pre class="coutput"><samp>John
500
Size: 2
Indices: points name
Array converted to list: points 500 name John
---
red
640
480
---
640
480
red
</samp></pre>
  </li>

  <li id="dictionaries">
    A <b>dictionary</b> is a data type that combines the
    features of arrays and lists.
    <pre><code># Create dictionary
dict set students 0 name John
dict set students 0 points 200
dict set students 1 name Meghan
dict set students 1 points 300

# Dictionary is a value type.
puts $students

# Acces dictionary values
puts [dict get $students 1]
puts [dict get $students 1 name]

puts ---

# Dictionary functions
puts "Keys: [dict keys $students]"
puts "Size: [dict size $students]"
puts "Values: [dict values $students]"
</code></pre>
<pre class="coutput"><samp>0 {name John points 200} 1 {name Meghan points 300}
name Meghan points 300
Meghan
---
Keys: 0 1
Size: 2
Values: {name John points 200} {name Meghan points 300}
</samp></pre>
  </li>

  <li id="functions">
    <b>Functions</b> are defined using word <em>proc</em>.
    By default, parameters are passed by value.
    If the procedure must modify a variable
    make it global or use <em>upvar</em> command.
    <pre><code># Modify list using upvar command
proc modifyList {lst} {
  upvar $lst listRef
  lset listRef 1 111
}

# Pass by reference with global
proc modifyNumber {n} {
  global $n
  set $n 10
}

# Pass by value
proc sumList {lst} {
  set sum 0
  foreach value $lst {
    set sum [expr {$sum+$value}]
  }
  return $sum
}

# Global variable declaration
global myValue

set myValue 20
set myList "5 6 7 8"

# Pass a variable name to modify its value
modifyList myList
modifyNumber myValue

puts "List: $myList"
puts "Number: $myValue"

# Pass the contents of the variable
puts "Sum: [sumList $myList]"
</code></pre>
<pre class="coutput"><samp>List: 5 111 7 8
Number: 10
Sum: 131
</samp></pre>
  </li>

</ol>

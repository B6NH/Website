
<h1>Elements</h1>

<table id="maintable">
  <tr>
    <td>H</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td>He</td>
  </tr>
  <tr>
    <td>Li</td>
    <td>Be</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td>B</td>
    <td>C</td>
    <td>N</td>
    <td>O</td>
    <td>F</td>
    <td>Ne</td>
  </tr>
  <tr>
    <td>Na</td>
    <td>Mg</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td>Al</td>
    <td>Si</td>
    <td>P</td>
    <td>S</td>
    <td>Cl</td>
    <td>Ar</td>
  </tr>
  <tr>
    <td>K</td>
    <td>Ca</td>
    <td>Sc</td>
    <td>Ti</td>
    <td>V</td>
    <td>Cr</td>
    <td>Mn</td>
    <td>Fe</td>
    <td>Co</td>
    <td>Ni</td>
    <td>Cu</td>
    <td>Zn</td>
    <td>Ga</td>
    <td>Ge</td>
    <td>As</td>
    <td>Se</td>
    <td>Br</td>
    <td>Kr</td>
  </tr>
  <tr>
    <td>Rb</td>
    <td>Sr</td>
    <td>Y</td>
    <td>Zr</td>
    <td>Nb</td>
    <td>Mo</td>
    <td>Tc</td>
    <td>Ru</td>
    <td>Rh</td>
    <td>Pd</td>
    <td>Ag</td>
    <td>Cd</td>
    <td>In</td>
    <td>Sn</td>
    <td>Sb</td>
    <td>Te</td>
    <td>I</td>
    <td>Xe</td>
  </tr>
  <tr>
    <td>Cs</td>
    <td>Ba</td>
    <td>Lu</td>
    <td>Hf</td>
    <td>Ta</td>
    <td>W</td>
    <td>Re</td>
    <td>Os</td>
    <td>Ir</td>
    <td>Pt</td>
    <td>Au</td>
    <td>Hg</td>
    <td>Tl</td>
    <td>Pb</td>
    <td>Bi</td>
    <td>Po</td>
    <td>At</td>
    <td>Rn</td>
  </tr>
  <tr>
    <td>Fr</td>
    <td>Ra</td>
    <td>Lr</td>
    <td>Rf</td>
    <td>Db</td>
    <td>Sg</td>
    <td>Bh</td>
    <td>Hs</td>
    <td>Mt</td>
    <td>Ds</td>
    <td>Rg</td>
    <td>Cn</td>
    <td>Nh</td>
    <td>Fl</td>
    <td>Mc</td>
    <td>Lv</td>
    <td>Ts</td>
    <td>Og</td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td>La</td>
    <td>Ce</td>
    <td>Pr</td>
    <td>Nd</td>
    <td>Pm</td>
    <td>Sm</td>
    <td>Eu</td>
    <td>Gd</td>
    <td>Tb</td>
    <td>Dy</td>
    <td>Ho</td>
    <td>Er</td>
    <td>Tm</td>
    <td>Yb</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td>Ac</td>
    <td>Th</td>
    <td>Pa</td>
    <td>U</td>
    <td>Np</td>
    <td>Pu</td>
    <td>Am</td>
    <td>Cm</td>
    <td>Bk</td>
    <td>Cf</td>
    <td>Es</td>
    <td>Fm</td>
    <td>Md</td>
    <td>No</td>
    <td></td>
    <td></td>
  </tr>
</table>

<br>


<h4>Atomic number</h4>

<div id="atnum"></div>

<h4>Electron configuration</h4>

<div id="confdiv"></div>

<h4>Graphical configuration</h4>

<canvas id="graphicconf" width="800" height="60"></canvas>

<h4>Atom model</h4>

<canvas id="atommodel" width="200" height="200"></canvas>

<br>

<script>

  // ------------------------------------------------------

  const electrons = [2, 2, 6, 2,
                     6, 2, 10, 6,
                     2, 10, 6, 2,
                     14, 10, 6, 2];

  const orbitals = ["1s","2s","2p","3s",
                    "3p","4s","3d","4p",
                    "5s","4d","5p","6s",
                    "4f","5d","6p","7s"];

  // Square size
  const rectSize = 14;

  // Graphical configuration square position
  const posY = 20;

  // Arrow colors
  const upArrowColor = "#ff0000";
  const downArrowColor = "#000000";

  // ------------------------------------------------------

  function orbSort(orbitals){

    let newArr = [];

    for(let i=1;i<=7;i++){
      for(let j=0;j<orbitals.length;j++){
        if(orbitals[j][0]==i){
          newArr.push(orbitals[j]);
        }
      }
    }

    return newArr;

  }

  function electronConfiguration(n){

    // Sum electrons
    let index = 0; let sum = 0;
    while(sum < n){ sum += electrons[index++]; }

    // Add complete orbitals
    const lastIndex = index - 1;
    let conf = [];
    for (let i = 0; i < lastIndex; i++) {
      conf.push(orbitals[i] + electrons[i]);
    }

    // Add last orbital
    conf.push(orbitals[lastIndex] + (electrons[lastIndex] - sum + n));

    // Sort orbitals
    return orbSort(conf);

  }

  function numShells(conf){

    let currentShell = 1;
    let shells = 1;

    for(let i=0;i<conf.length;i++){
      if(conf[i][0]!=currentShell){
        currentShell = conf[i][0];
        shells++;
      }
    }

    return shells;

  }

  // Draw arrows in group of squares
  function drawArrows(color,rectCount,arrowX,n,ctx){

    ctx.fillStyle = color;

    while(n>0&&rectCount>0){
      ctx.beginPath();
      ctx.fillRect(arrowX,posY,rectSize/2,rectSize);
      ctx.stroke();
      n--;
      rectCount--;
      arrowX += rectSize;
    }

    return n;

  }

  function drawGraphicalConfiguration(confArr,n){

    let can = document.getElementById("graphicconf");
    let ctx = can.getContext("2d");
    ctx.fillStyle = "#ffa099";
    ctx.fillRect(0, 0, 800, 60);

    let posX = 10;

    for(let i=0;i<confArr.length;i++){

      let squares;
      let orbital = confArr[i][1];

      switch(orbital){
        case "s":
          squares = 1;
          break;
        case "p":
          squares = 3;
          break;
        case "d":
          squares = 5;
          break;
        case "f":
          squares = 7;
          break;
        default:
          break;
      }

      const initX = posX;

      // Draw group of empty squares
      for(let j=0;j<squares;j++){
        ctx.beginPath();
        ctx.rect(posX,posY,rectSize,rectSize);
        ctx.stroke();
        posX += rectSize;
      }

      // Up Arrows
      n = drawArrows(upArrowColor,squares,initX,n,ctx);

      // Down Arrows
      n = drawArrows(downArrowColor,squares,initX+rectSize/2,n,ctx);

      // Position of next square group
      posX += rectSize;

    }

  }

  function drawAtomModel(confArr){
    let can = document.getElementById("atommodel");
    let ctx = can.getContext("2d");
    ctx.fillStyle = "#ffa099";
    ctx.fillRect(0, 0, 200, 200);
    const shells = numShells(confArr);
    for(let i=1;i<=shells;i++){
      ctx.beginPath();
      ctx.arc(100, 100, i*15, 0, 2 * Math.PI);
      ctx.stroke();
    }
  }

  function main(){

    // Atomic number
    let n = 79;

    // Get electron configuration
    let confArr = electronConfiguration(n);

    // Create output string
    let confString = "";
    for(let i=0;i<confArr.length;i++){
      confString += confArr[i] + (i == confArr.length-1 ? "" : " ");
    }

    // Display atomic number and configuration string
    document.getElementById("atnum").innerHTML = n;
    document.getElementById("confdiv").innerHTML = confString;

    // Show results graphically
    drawAtomModel(confArr);
    drawGraphicalConfiguration(confArr,n);

  }

  // ------------------------------------------------------

  main();

  // ------------------------------------------------------

</script>

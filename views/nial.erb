<h1>Nial</h1>

<p>
  Nial is the programming language most suitable for tasks
  involving mathematical calculations. Its main and basic data
  type is multidimensional array. Thanks to many built-in
  functions, it is easy to perform operations on vectors
  and matrices.
</p>

<ol>
  <li><a href="#session">Programming session</a></li>
  <li><a href="#assignments">Assignments</a></li>
  <li><a href="#strings">Strings</a></li>
  <li><a href="#math">Mathematical operations</a></li>
  <li><a href="#creating">Creating arrays</a></li>
  <li><a href="#loops">Conditional statement and loops</a></li>
  <li><a href="#processing">Array processing functions</a></li>
  <li><a href="#definitions">Function definitions</a></li>
  <li><a href="#transformers">Transformers</a></li>
</ol>

<hr>

<ol>

  <li id="session">
    The Nial language is designed primarily for interactive use.
    To start <b>programming session</b>, on the command line type <code>nial -i</code>.
    Programs can also be saved in text files with the extension .ndf.
    To load a previously created program, use <em>loaddefs</em> function.
    For example, if the file name is <em>myfile.ndf</em>, type <code>loaddefs "myfile</code>.
  </li>

  <li id="assignments">
    To <b>assign</b> a value to a variable one may
    use the <em>:=</em> sign or word <em>gets</em>.
    Comments are indicated by a percentage sign.
    <pre><code>% Assignments
A := 15
B gets 33

% Mathematical operations
A + B
A - B
A * B
A / B
</code></pre>
<pre class="coutput"><samp>15
33
48
-18
495
0.454545
</samp></pre>
  </li>

  <li id="strings">
    Variables can store not only numbers but also <b>strings</b>.
    <pre><code>% Variables containing strings
greeting := 'Hi'
name := 'Farah'

% Use link function to connect arrays
link greeting ' ' name

% Functions can also be used in infix notation
greeting link name
</code></pre>
<pre class="coutput"><samp>Hi
Farah
Hi Farah
HiFarah
</samp></pre>
  </li>

  <li id="math">
    Math operations work for <b>arrays</b> if they have
    the same size or if the size of one of them is 1.
    <pre><code>5 6 7 * 4 5 2
8 5 3 / 2
9 - 4 2 7
</code></pre>
<pre class="coutput"><samp>20 30 14
4. 2.5 1.5
5 7 2
</samp></pre>
  </li>

  <li id="creating">
    To create an array with more <b>dimensions</b>
    one can use the <em>reshape</em> function.
    How the data is displayed on the screen depends
    on two switches: diagram/sketch and decor/nodecor.
    <pre><code>% Set switches
set "diagram
set "decor

% Create 3x3 array and fill it with values generated
% by function call 'count 9' (numbers from 1 to 9)
3 3 reshape count 9
</code></pre>
<pre class="coutput"><samp>sketch
"nodecor
+-+-+-+
|1|2|3|
+-+-+-+
|4|5|6|
+-+-+-+
|7|8|9|
+-+-+-+
</samp></pre>
  </li>

  <li id="loops">
    Nial like many other languages has <b>conditional statements</b> and <b>loops</b>.
    <pre><code>% Conditional statement
Number := 5
IF Number = 4 THEN
  Result := 1
ELSE
  Result := 2
ENDIF

% For loop
Total := 0
FOR I WITH count 5 DO
  Total := Total + I
ENDFOR

% While loop
I := 0
WHILE I < 5 DO
  write I
  I := I + 1
ENDWHILE
</code></pre>
  </li>

  <li id="processing">
    Language provides many <b>functions</b> that can be used to process arrays.
    <pre><code>set "diagram
myarr := 4 3 reshape count 12

% Get array shape (4 3)
shape myarr

% Transpose of an array
transpose myarr

% Rows and columns
rows myarr
cols myarr

% Array size
tally myarr

% Reverse array
reverse myarr

% Array sum
sum myarr
</code></pre>
<pre class="coutput"><samp>sketch
+--+--+--+
| 1| 2| 3|
+--+--+--+
| 4| 5| 6|
+--+--+--+
| 7| 8| 9|
+--+--+--+
|10|11|12|
+--+--+--+
+-+-+
|4|3|
+-+-+
+-+-+-+--+
|1|4|7|10|
+-+-+-+--+
|2|5|8|11|
+-+-+-+--+
|3|6|9|12|
+-+-+-+--+
+-------+-------+-------+----------+
|+-+-+-+|+-+-+-+|+-+-+-+|+--+--+--+|
||1|2|3|||4|5|6|||7|8|9|||10|11|12||
|+-+-+-+|+-+-+-+|+-+-+-+|+--+--+--+|
+-------+-------+-------+----------+
+----------+----------+----------+
|+-+-+-+--+|+-+-+-+--+|+-+-+-+--+|
||1|4|7|10|||2|5|8|11|||3|6|9|12||
|+-+-+-+--+|+-+-+-+--+|+-+-+-+--+|
+----------+----------+----------+
12
+--+--+--+
|12|11|10|
+--+--+--+
| 9| 8| 7|
+--+--+--+
| 6| 5| 4|
+--+--+--+
| 3| 2| 1|
+--+--+--+
78
</samp></pre>
  </li>

  <li id="definitions">
    Nial allows users to define <b>new functions</b>.
    <pre><code>set "diagram

% Function definition
myfunction IS OPERATION Param { Param * 2 }

% Alternatively, the word 'OP' can be used
newfunction IS OP NumberA NumberB {
  NumberA + NumberB
}

myfunction 8
myfunction count 5
myfunction (3 4 reshape count 12)

newfunction 5 6
9 newfunction 15

% The same argument can be passed
% simultaneously to multiple functions
% using atlas (list of functions)
[opposite,myfunction,sin] 2
</code></pre>
<pre class="coutput"><samp>sketch
16
2 4 6 8 10
+--+--+--+--+
| 2| 4| 6| 8|
+--+--+--+--+
|10|12|14|16|
+--+--+--+--+
|18|20|22|24|
+--+--+--+--+
11
24
+--+-+--------+
|-2|4|0.909297|
+--+-+--------+
</samp></pre>
  </li>

  <li id="transformers">
    With <b>transformers</b>, new modified versions of functions can be created.
    <pre><code>% Transformer definition
TRIPLE IS TRANSFORMER f OPERATION P {
 f f f P
}

increment IS OPERATION P { P + 1 }

% Apply increment function 3 times
TRIPLE increment 7

% Nial also has built-in transformers
% For example, 'EACH' applies a function
% to each element of an array
EACH reverse 'one' 'two' 'three'

% Calling a function without a
% transformer inverts the entire array
reverse 'one' 'two' 'three'
</code></pre>
<pre class="coutput"><samp>10
+---+---+-----+
|eno|owt|eerht|
+---+---+-----+
+-----+---+---+
|three|two|one|
+-----+---+---+
</samp></pre>
  </li>

</ol>

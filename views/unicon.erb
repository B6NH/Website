<h1>Unicon</h1>

<p>
  Unicon is a very high-level programming language
  with goal-directed evaluation. Control flow is based
  on the action success or failure. Language also makes
  extensive use of generators.
</p>

<ul>

  <li>
    To compile and <b>run</b> Unicon program save the source
    code in a file with the extension .icn and at the
    command line type <code>unicon myfilename.icn -x</code>.
  </li>

  <li>
    Unicon program starts with the <em><b>main</b></em> function.
    <pre><code>procedure main()
  write("Hello World")
end
</code></pre>
<pre class="coutput"><samp>Hello World
</samp></pre>
  </li>

  <li>
    Operator <em>:=</em> is used for assignments.
    <b>Variables</b> may or may not be declared before use.
    Lines that start with a <em>#</em> sign are comments.
    <pre><code>procedure main()

  # Optional variable declaration
  local a, b

  # Semicolon is used to separate statements on a single line
  a := 15 ; b := 23

  write(a," + ",b," = ",a + b)

end
</code></pre>
<pre class="coutput"><samp>15 + 23 = 38
</samp></pre>
  </li>

  <li>
    Control structure <em><b>every</b></em> executes a block
    of code for all values returned by the generator.
    It can be used to create loops.
    <pre><code>procedure main()

  sum := 0 ; product := 1

  # Expression '1 to 5' generates values from 1 to 5,
  # which are assigned to 'i' and used inside loop
  every i := 1 to 5 do {
    sum +:= i
    product *:= i
  }

  write(sum)
  write(product)

end
</code></pre>
<pre class="coutput"><samp>15
120
</samp></pre>
  </li>

  <li>
    <b>Functions</b> are defined using the word <em>procedure</em>.
    The argument types may be specified, but it is not necessary.
    Simple types are passed by value and compound types by reference.
    <pre><code>procedure main()
  write(subtract(100,25))
  write(addAndMultiply(7,12))
  write(myAdd())
end

# Parameters without defined types
procedure subtract(a,b)
  return a - b
end

# Explicitly defined types
procedure addAndMultiply(a:integer,b:integer)
  return a + b + a * b
end

# Default argument values
procedure myAdd(p:5,d:integer:12)
  return p + d
end
</code></pre>
<pre class="coutput"><samp>75
103
17
</samp></pre>
  </li>

  <li>
    <b>Tables</b> are the basic compound type in the Unicon language.
    They are unordered collections of values that are accessed by keys.
    <pre><code>procedure main()

  # Initialize table
  myTable := table()

  # Set values
  myTable["color"] := "red"
  myTable["location"] := "east"
  myTable["animal"] := "lion"

  write("Values: ",myTable["color"],", ", myTable["location"])

  write("---")

  # Table can have default value
  numbers := table(2)
  numbers["first"] := 5
  numbers["second"] := 10

  write(numbers["first"])
  write(numbers["second"])
  write("Default value: ",numbers["otherkey"])

  write("---")

  # Insert new value
  insert(numbers,"newValue",123)

  write("New value: ",numbers["newValue"])

  # Delete value
  delete(numbers,"newValue")

  write("After deletion: ",numbers["newValue"])

  write("---")

  # Check if the key exists in the table
  if member(myTable,"color") then {
    write("Key ","\"color\""," exists")
  }

  # Use asterisk to check table size
  write("Table size: ",*myTable)

  write("Table elements:")

  # Exclamation mark generates all values from the table
  every element := !myTable do {
    write(element)
  }

  write("---")

  # The question mark takes random value from the table
  write(?myTable)

end
</code></pre>
<pre class="coutput"><samp>Values: red, east
---
5
10
Default value: 2
---
New value: 123
After deletion: 2
---
Key "color" exists
Table size: 3
Table elements:
lion
red
east
---
lion
</samp></pre>
  </li>

  <li>
    <b>List</b> is an ordered collection of values.
    Its size can change during program execution.
    <pre><code>procedure main()

  # Create a list of size 5
  # Default value for all items is 1
  emptyList := list(5,1)

  # Create a list using a literal
  myList := [15,"purple","white"]

  # First element of list has index 1
  write(myList[1])

  write("---")

  # Add an element at the beginning of the list
  push(myList,"red")

  # As with tables, exclamation mark
  # generates all values in the list
  every e := !myList do {
    write(e)
  }

  # Remove first item from the list
  pop(myList)

  write("---")

  # Add a value to the end of the list
  put(myList,"end")

  every e := !myList do {
    write(e)
  }

  # Remove a value from the end of the list
  pull(myList)

  write("---")

  # Add value at index 2
  insert(myList,2,"second")

  every e := !myList do {
    write(e)
  }

  write("---")

  # Remove value at index 3
  delete(myList,3)

  every e := !myList do {
    write(e)
  }

end

</code></pre>
<pre class="coutput"><samp>15
---
red
15
purple
white
---
15
purple
white
end
---
15
second
purple
white
---
15
second
white
</samp></pre>
  </li>

  <li>
    <b>Records</b> allow to define new types of data.
    They have a fixed size and store values as fields.
    <pre><code># Declare rectangle record as a new global name
record rectangle(width,height,color)

procedure main()

  # Create record instances
  b := rectangle(20,10,"blue")
  r := rectangle(30,45,"red")
  o := rectangle(50,25,"orange")

  # Access values by field name
  write("b: ", b.width, ", ", b.height, ", ", b.color)

  # Access values by index
  write("r: ", r[1], ", ", r[2], ", ", r[3])

  # Access values using array notation
  write("o: ", o["width"], ", ", o["height"], ", ", o["color"])

end
</code></pre>
<pre class="coutput"><samp>b: 20, 10, blue
r: 30, 45, red
o: 50, 25, orange
</samp></pre>
  </li>

  <li>
    <b>Sets</b> are unordered collections of unique elements.
    <pre><code>procedure main()

  # Create set
  mySet := set("stone","glass",18,"violet","albedo")

  # Add element
  insert(mySet,"star")

  write("Set size: ",*mySet)
  write("Set:")

  # Display set elements
  every e := !mySet do {
    write(" ",e)
  }

  # Remove element
  delete(mySet,"stone")

  write("---")

  flowers := set("orchid","tulip","violet","rose")

  write("Union:")
  every e := !(flowers ++ mySet) do {
    write(" ",e)
  }

  write("Intersection:")
  every e := !(flowers ** mySet) do {
    write(" ",e)
  }

  write("Difference:")
  every e := !(flowers -- mySet) do {
    write(" ",e)
  }

  write("---")

  # List passed to the set constructor
  # can be created using list comprehension
  every el := !set([: 1 to 10 by 2 :]) do {
    write(el)
  }

end
</code></pre>
<pre class="coutput"><samp>Set size: 6
Set:
 stone
 star
 violet
 18
 glass
 albedo
---
Union:
 star
 violet
 tulip
 orchid
 rose
 18
 glass
 albedo
Intersection:
 violet
Difference:
 tulip
 orchid
 rose
---
5
9
3
7
1
</samp></pre>
  </li>

  <li>
    <b>Classes</b> allow to define new data
    types and methods that operate on them.
    <pre><code># Class definition
class plorg(name,level,color,points)

  # Method definitions

  method showAll()
    write("Plorg:")
    write(" Name: ",name)
    write(" Level: ",level)
    write(" Color: ",color)
    write(" Points: ",points)
  end

  method showLevel()
    # Use 'self' to explicitly indicate
    # that variable is a field of object.
    write("Level: ",self.level)
  end

  method showPoints()
    write("Points: ",points)
  end

  method increaseLevel(val:1)
    level +:= val
  end

  method addPoints(p)
    points +:= p
  end

  # Constructor with default values
  initially(na:"",le:0,co:"white",po:0)
    name := na
    level := le
    color := co
    points := po

end

procedure main()

  # Create object instance
  plr := plorg("Betelgeuse",2,"purple")

  # Call method to add points
  plr.addPoints(25)

  # Display plorg data
  plr.showAll()

  write("---")

  every 1 to 5 do
    plr.increaseLevel()

  # Show level after method calls
  plr.showLevel()

end
</code></pre>
<pre class="coutput"><samp>Plorg:
 Name: Betelgeuse
 Level: 2
 Color: purple
 Points: 25
---
Level: 7
</samp></pre>
  </li>

</ul>
